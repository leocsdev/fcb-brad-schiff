.boxes {
  display: flex;
  width: 100%;
}

.progress {
  /* Make a border except the right side */
  border: 1px solid #c7c7c7;
  border-right: none;

  position: relative;
}

.progress-inner {
  position: absolute;
  /* Use full length by setting top and bottom to 0 */
  top: 0;
  bottom: 0;

  /* Use full width */
  width: 100%;

  background-color: #7ecc00;
  opacity: 0.57;

  /* Re-render the progress inner instead of modifying the width */
  /* Set it to 0 and progresses when user gets correct answer */
  transform: scaleX(0);

  /* Align the transformed progress inner to the left */
  /* first value (center) - controls verical placement */
  /* second value (left) - controls horizontal placement */
  transform-origin: center left;

  /* Animate transform */
  transition: transform 0.4s ease-out;
}

.box {
  height: 40px;
  border-right: 1px solid #c7c7c7;

  /* Take up 1fr width each*/
  flex: 1;
}

.overlay {
  /* Grab the full screen */
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;

  /* Add a semi see-through white background */
  background-color: rgba(255, 255, 255, 0.8);

  /* Center overlay content */
  display: flex;
  justify-content: center;
  align-items: center;

  /* Hide overlay, only shows when user wins or lose */
  opacity: 0;
  visibility: hidden;

  /* Animate */
  transition: all 0.33s ease-out;
  transform: scaleX(1.2);
}

/* If body has class of overlay-is-open, show overlay */
body.overlay-is-open .overlay {
  opacity: 1;
  visibility: visible;

  transform: scaleX(1);
}

/* Blur the background */
body.overlay-is-open .main-ui {
  filter: blur(4px);
}

/* Turn problem colored red when user inputs wrong answer */
@keyframes showError {
  50% {
    color: red;
    transform: scaleX(1.2);
  }

  100% {
    color: #000;
    transform: scaleX(1);
  }
}

.animate-wrong {
  /* color: red; */

  animation: 0.45s showError;
}

.problem {
  text-align: center;
}
